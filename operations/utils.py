import torch

device = 'cuda'

def keypoints_to_homogeneus_functional(keypoints):
    if keypoints[0].dim() == 1 : keypoints  = [point.reshape(2,1) for point in keypoints]
    return tuple([torch.cat((point.float(), torch.ones(1,1)), axis = 0).to(device) for point in keypoints])

def keypoints_to_homogeneus_and_concatenate(keypoints):
    if keypoints[0].dim() == 1 : keypoints  = [point.reshape(2,1) for point in keypoints]
    keypoints = tuple([torch.cat((point.float(), torch.ones(1,1)), axis = 0).to(device) for point in keypoints])
    compose_data = torch.cat((keypoints), 1)  # concatenate data into one multichannel pytoch tensor
    return compose_data

#converts the intermediate values ​​generated by the transformations to 0-1
def mask_change_to_01_functional(mask):
    for i in range(mask.shape[1]):
        for j in range(mask.shape[2]):
            if mask[0, i, j] < 0.5:
                mask[0, i, j] = 0
            else:
                mask[0, i, j] = 1


